metadata={systemName:"JSSP-Happiness",displayName:"JSSP-Happiness",description:"Happiness OpenAI  Service Broker",configuration:{ServiceURL:{displayName:"OpenAI Service URL",type:"string",value:"https://api.openai.com/v1/chat/completions",required:!0},openai_api_key:{displayName:"OPENAI_API_KEY",type:"string",value:"",required:!0},model:{displayName:"model",type:"string",value:"gpt-4o"}}},ondescribe=async function({configuration:e}){postSchema({objects:{Chat:{displayName:"Chat",description:"Chat with OpenAI",properties:{chatinput:{displayName:"chatinput",type:"string"},chatoutput:{displayName:"chatoutput",type:"string"}},methods:{getResponse:{displayName:"Get Response",type:"read",inputs:["chatinput"],outputs:["chatoutput"]}}}}})},onexecute=async function({objectName:e,methodName:t,parameters:a,properties:s,configuration:i}){switch(e){case"Chat":await async function(e,t,a,s){switch(e){case"getResponse":await function(e,t,a){return new Promise(((e,s)=>{var i=new XMLHttpRequest;i.onreadystatechange=function(){try{if(4!==i.readyState)return;if(200!==i.status)throw new Error("Failed with status "+i.status);var t=JSON.parse(i.responseText);postResult({chatresponse:t.choices[0]?t.choices[0].message.content:"No response"}),e()}catch(e){s(e)}};var n={model:a.model,messages:JSON.parse(t.chatinput+""),max_tokens:2048,response_format:{type:"text"}};i.open("POST",a.ServiceURL+""),i.setRequestHeader("Content-Type","application/json"),i.setRequestHeader("Authorization","Bearer "+a.openai_api_key),i.send(JSON.stringify(n))}))}(0,a,s);break;default:throw new Error("The method "+e+" is not supported.")}}(t,0,s,i);break;default:throw new Error("The object "+e+" is not supported.")}};
//# sourceMappingURL=jssp-happiness.js.map
